/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2016, University of Colorado, Boulder
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Univ of CO, Boulder nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Dave Coleman */

#ifndef OMPL_GEOMETRIC_PARALLEL_SETUP_
#define OMPL_GEOMETRIC_PARALLEL_SETUP_

#include "ompl/geometric/SimpleSetup.h"
#include "ompl/tools/multiplan/ParallelPlan.h"

namespace ompl
{
    namespace geometric
    {
        /// @cond IGNORE
        OMPL_CLASS_FORWARD(ParallelSetup);
        /// @endcond

        /** \class ompl::geometric::ParallelSetupPtr
            \brief A shared pointer wrapper for ompl::geometric::ParallelSetup */

        /** \brief Create the set of classes typically needed to solve a
            geometric problem, with support for multiple planners running in parallel */
        class ParallelSetup : public SimpleSetup
        {
        public:
            /** \brief Constructor needs the state space used for planning. */
            explicit ParallelSetup(const base::SpaceInformationPtr &si);

            /** \brief Constructor needs the state space used for planning. */
            explicit ParallelSetup(const base::StateSpacePtr &space);

            /** \brief Run the planner for up to a specified amount of time (default is 1 second) */
            virtual base::PlannerStatus solve(double time = 1.0);

            /** \brief Run the planner until \e ptc becomes true (at most) */
            virtual base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc);

            /** \brief Get the current planner */
            virtual const base::PlannerPtr &getPlanner() const
            {
                throw Exception("This function is not (yet) available for ParallelSetup");
                return planner_;
            }

            /** \brief Get information about the exploration data structure the motion planner used. */
            virtual void getPlannerData(base::PlannerData &pd) const
            {
                throw Exception("This function is not (yet) available for ParallelSetup");
            }

            /** \brief Get the planner allocator */
            virtual const base::PlannerAllocator &getPlannerAllocator() const
            {
                throw Exception("This function is not (yet) available for ParallelSetup");
                return pa_;
            }

            /** \brief This function can be called multiple times */
            virtual void setPlanner(const base::PlannerPtr &planner)
            {
                pp_->addPlanner(planner);
            }

            /** \brief This function can be called multiple times */
            virtual void setPlannerAllocator(const base::PlannerAllocator &pa)
            {
                pp_->addPlannerAllocator(pa);
            }

            /** \brief Clear all planning data. This only includes
                data generated by motion plan computation. Planner
                settings, start & goal states are not affected. */
            virtual void clear();

            /** \brief Print information about the current setup */
            virtual void print(std::ostream &out = std::cout) const;

            /** \brief This method will create the necessary classes
                for planning. The solve() method will call this
                function automatically. */
            virtual void setup();

        protected:

            /** \brief Instance of parallel planning to use for computing solutions in parallel */
            ompl::tools::ParallelPlanPtr pp_;
        };
    }
}
#endif

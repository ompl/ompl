---
title: "VAMP Class Architecture - Design Patterns & Relationships"
---
classDiagram
    %% OMPL Foundation Interfaces
    class OMPLStateValidityChecker {
        <<interface>>
        +isValid(state) bool*
        +clearance(state) double
    }
    
    class OMPLMotionValidator {
        <<interface>>
        +checkMotion(start, end) bool*
        +checkMotion(start, end, lastValid) bool*
    }
    
    class OMPLPlanner {
        <<abstract>>
        +solve(terminationCondition) PlannerStatus*
        +setProblemDefinition(pdef)*
        +setup()*
        +clear()*
        #si_ SpaceInformationPtr
        #pdef_ ProblemDefinitionPtr
    }
    
    class OMPLSpaceInformation {
        +setStateValidityChecker(checker)
        +setMotionValidator(validator)
        +setup()
        +isValid(state) bool
        +checkMotion(s1, s2) bool
        -stateSpace_ StateSpacePtr
        -stateValidityChecker_ StateValidityCheckerPtr
        -motionValidator_ MotionValidatorPtr
    }
    
    class OMPLProblemDefinition {
        +setStartAndGoalStates(start, goal)
        +setOptimizationObjective(obj)
        +addStartState(state)
        +getSolutionPath() PathPtr
        +hasSolution() bool
        -si_ SpaceInformationPtr
        -startStates_ vector~State~
        -goal_ GoalPtr
        -solutions_ vector~SolutionPtr~
    }
    
    %% VAMP Core Integration Classes
    class VampStateValidatorRobot {
        <<SIMD-accelerated>>
        -vectorizedEnvironment VectorizedEnvironment
        +isValid(state) bool
        -ompl_to_vamp(state) Configuration
        +VampStateValidator(si, venv)
    }
    
    class VampMotionValidatorRobot {
        <<SIMD-accelerated>>
        -vectorizedEnvironment VectorizedEnvironment
        +checkMotion(start, end) bool
        +checkMotion(start, end, lastValid) bool
        -ompl_to_vamp(state) Configuration
        +VampMotionValidator(si, venv)
        +motionSamplingResolution: size_t = Robot::resolution
    }
    
    class VampOMPLPlannerRobot {
        <<Facade Pattern>>
        -robotConfiguration_ unique_ptr~RobotConfig~Robot~~
        -environmentFactory_ unique_ptr~EnvironmentFactory~
        -planningContext_ OMPLPlanningContext~Robot~
        -vectorizedEnvironment_ VectorizedEnvironment
        -isInitialized_ bool
        +VampOMPLPlanner(robotConfig, envFactory)
        +initialize()
        +plan(config) PlanningResult
        +writeOptimizedSolutionPath() string
        +getSpaceInformation() SpaceInformationPtr
        +printConfiguration()
        +isInitialized() bool
    }
    
    class OMPLPlanningContextRobot {
        <<Unified Adapter + Planner Management>>
        -simpleSetup_ unique_ptr~SimpleSetup~
        +setupStateSpace(robotConfig, venv)
        +setProblem(start, goal)
        +plan(config) PlanningResult
        +getSpaceInformation() SpaceInformationPtr
        +getProblemDefinition() ProblemDefinitionPtr
        +registerPlanner(name, factory) static
        +createPlannerByName(name, si, params) static
        +getAvailablePlannerNames() static
        -createPlannerAllocator(name, params) PlannerAllocator
        -getPlannerRegistry() static map~string, PlannerAllocatorFunction~&
        -getPlannerMutex() static mutex&
        -createBuiltInPlanners() static map~string, PlannerAllocatorFunction~
        -applyParameters(planner, params) static
    }
    
    %% Configuration System Hierarchy
    class RobotConfigRobot {
        <<interface>>
        +get_joint_limits() vector~pair~double,double~~*
        +get_start_configuration_array() array~float,dimension~*
        +get_goal_configuration_array() array~float,dimension~*
        +get_robot_name() string*
        +dimension_: size_t = Robot::dimension
    }
    
    class RobotConfigurationRobot {
        <<concrete implementation>>
        -startConfig_ vector~float~
        -goalConfig_ vector~float~
        -robotName_ string
        +RobotConfiguration(name, start, goal)
        +get_joint_limits() vector~pair~double,double~~
        +get_start_configuration_array() array~float,dimension~
        +get_goal_configuration_array() array~float,dimension~
        +get_robot_name() string
        -validateDimensions()
        -validateJointLimits()
        -vectorToArray(vec) array~float,dimension~
    }
    
    class EnvironmentFactory {
        <<Strategy Pattern>>
        +create_environment() Environment~float~*
        +get_environment_name() string*
        +get_description() string*
    }
    
    class ConfigurableEnvironmentFactory {
        <<concrete implementation>>
        -obstacleConfigurations_ vector~ObstacleConfig~
        -environmentName_ string
        -environmentDescription_ string
        -robotName_ string
        +ConfigurableEnvironmentFactory(obstacles, name, desc, robot)
        +setObstacles(obstacles)
        +addObstacle(obstacle)
        +setMetadata(name, desc)
        +setRobotName(name)
        +create_environment() Environment~float~
        +get_environment_name() string
        +get_description() string
    }
    
    %% Registry System Architecture
    class RobotRegistry {
        <<Singleton Registry>>
        -handlers_ map~string, unique_ptr~RobotHandler~~
        -robotMetadata_ map~string, RobotMetadata~
        -mutex_ mutable mutex
        +getInstance() RobotRegistry& static
        +registerRobot~Robot~(name) template
        +isRobotRegistered(name) bool
        +getRobotMetadata(name) RobotMetadata
        +getRegisteredRobots() vector~string~
        +createRobotConfig(name, start, goal) any
        +createPlanner(name, config, factory) any
        +initializePlanner(name, planner)
        +executePlanning(name, planner, config) PlanningResult
        +getJointLimits(name) vector~pair~double,double~~
        +createBenchmarkManager(name, start, goal, factory) any
        +executeBenchmark(name, manager, experiment, planners, runs, timeout) map~string,string~
        +isBenchmarkingAvailable(name) bool
        +getBenchmarkingEnabledRobots() vector~string~
        -registerBuiltInRobots()
    }
    
    class RobotHandler {
        <<Type Erasure Interface>>
        +createRobotConfig(name, start, goal) any*
        +createPlanner(config, factory) any*
        +initializePlanner(planner)*
        +executePlanning(planner, config) PlanningResult*
        +getMetadata() RobotMetadata*
        +validateConfigurationSize(config) bool*
        +getJointLimits() vector~pair~double,double~~*
        +createBenchmarkManager(start, goal, factory) any*
        +executeBenchmark(manager, experiment, planners, runs, timeout) map~string,string~*
    }
    
    class TypedRobotHandlerRobot {
        <<Type-safe Implementation>>
        +createRobotConfig(name, start, goal) any
        +createPlanner(config, factory) any
        +initializePlanner(planner)
        +executePlanning(planner, config) PlanningResult
        +getMetadata() RobotMetadata
        +validateConfigurationSize(config) bool
        +getJointLimits() vector~pair~double,double~~
        +createBenchmarkManager(start, goal, factory) any
        +executeBenchmark(manager, experiment, planners, runs, timeout) map~string,string~
    }
    
    %% OMPL Built-in Planners
    class RRTConnect {
        <<OMPL Built-in>>
        +solve(terminationCondition) PlannerStatus
        +range: double
        +intermediateStates: bool
    }
    
    class BITstar {
        <<OMPL Built-in>>
        +solve(terminationCondition) PlannerStatus
        +rewireFactor: double
        +samplesPerBatch: int
        +useKNearest: bool
    }
    
    class PRM {
        <<OMPL Built-in>>
        +solve(terminationCondition) PlannerStatus
        +maxNearestNeighbors: int
        +connectionStrategy: string
    }
    
    %% Planner Factory Function Type
    class PlannerAllocatorFunction {
        <<Function Type>>
        +operator()(si, params) PlannerPtr
    }
    
    %% Relationships
    
    %% OMPL Foundation
    VampStateValidatorRobot --|> OMPLStateValidityChecker
    VampMotionValidatorRobot --|> OMPLMotionValidator
    RRTConnect --|> OMPLPlanner
    BITstar --|> OMPLPlanner
    PRM --|> OMPLPlanner
    
    %% Core Integration
    VampOMPLPlannerRobot --> OMPLPlanningContextRobot
    VampOMPLPlannerRobot --> RobotConfigRobot
    VampOMPLPlannerRobot --> EnvironmentFactory
    
    OMPLPlanningContextRobot --> OMPLSpaceInformation
    OMPLPlanningContextRobot --> OMPLProblemDefinition
    OMPLPlanningContextRobot --> VampStateValidatorRobot
    OMPLPlanningContextRobot --> VampMotionValidatorRobot
    
    %% Integrated Planner Management (no separate registry)
    OMPLPlanningContextRobot --> PlannerAllocatorFunction
    OMPLPlanningContextRobot ..> RRTConnect : creates
    OMPLPlanningContextRobot ..> BITstar : creates
    OMPLPlanningContextRobot ..> PRM : creates
    
    %% Configuration System
    RobotConfigurationRobot --|> RobotConfigRobot
    ConfigurableEnvironmentFactory --|> EnvironmentFactory
    
    %% Registry System
    RobotRegistry --> RobotHandler
    TypedRobotHandlerRobot --|> RobotHandler
    RobotRegistry --> TypedRobotHandlerRobot
    
    %% Usage Dependencies
    TypedRobotHandlerRobot ..> VampOMPLPlannerRobot : creates
    TypedRobotHandlerRobot ..> RobotConfigurationRobot : creates
    
    %% Styling
    classDef omplInterface fill:#e3f2fd,stroke:#1976d2,stroke-width:2px
    classDef vampCore fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    classDef configSystem fill:#e8f5e8,stroke:#388e3c,stroke-width:2px
    classDef registrySystem fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef plannerSystem fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    
    class OMPLStateValidityChecker omplInterface
    class OMPLMotionValidator omplInterface
    class OMPLPlanner omplInterface
    class OMPLSpaceInformation omplInterface
    class OMPLProblemDefinition omplInterface
    
    class VampStateValidatorRobot vampCore
    class VampMotionValidatorRobot vampCore
    class VampOMPLPlannerRobot vampCore
    class OMPLPlanningContextRobot vampCore
    
    class RobotConfigRobot configSystem
    class RobotConfigurationRobot configSystem
    class EnvironmentFactory configSystem
    class ConfigurableEnvironmentFactory configSystem
    
    class RobotRegistry registrySystem
    class RobotHandler registrySystem
    class TypedRobotHandlerRobot registrySystem
    
    class RRTConnect plannerSystem
    class BITstar plannerSystem
    class PRM plannerSystem
    class PlannerAllocatorFunction plannerSystem

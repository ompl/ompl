#!/bin/bash

set -e

if [ `id -u` == 0 ]; then
    SUDO=
    export DEBIAN_FRONTEND=noninteractive
    apt-get -y install lsb-release
else
    SUDO="sudo -H"
fi

ubuntu_version=`lsb_release -rs | sed 's/\.//'`

install_common_dependencies()
{
    # install most dependencies via apt-get
    ${SUDO} apt-get -y update
    ${SUDO} apt-get -y upgrade
    ${SUDO} apt-get -y install clang cmake pkg-config libboost-serialization-dev libboost-filesystem-dev libboost-system-dev libboost-program-options-dev libboost-test-dev libeigen3-dev wget libyaml-cpp-dev
    export CXX=clang++
}

install_python_binding_dependencies()
{
    ${SUDO} apt-get -y install python3-dev python3-pip castxml libboost-python-dev libboost-numpy-dev python3-numpy pypy3
    # install additional python dependencies via pip
    ${SUDO} pip3 install -vU https://github.com/CastXML/pygccxml/archive/develop.zip pyplusplus
}

install_app_dependencies()
{
    ${SUDO} apt-get -y install python3-pyqt5.qtopengl freeglut3-dev libassimp-dev python3-opengl python3-flask python3-celery libccd-dev libfcl-dev
    # install additional python dependencies via pip
    ${SUDO} pip3 install -vU PyOpenGL-accelerate
}

install_ompl()
{
    if [ -z $APP ]; then
        OMPL="ompl"
    else
        OMPL="omplapp"
    fi
    if [ -z $APP ]; then
        wget -O - https://github.com/ompl/${OMPL}/archive/@PROJECT_VERSION@.tar.gz | tar zxf -
        cd ${OMPL}-@PROJECT_VERSION@
    else
        wget -O - https://github.com/ompl/${OMPL}/releases/download/@PROJECT_VERSION@/${OMPL}-@PROJECT_VERSION@-Source.tar.gz | tar zxf -
        cd $OMPL-@PROJECT_VERSION@-Source
    fi
    mkdir -p build/Release
    cd build/Release
    cmake ../.. -DPYTHON_EXEC=/usr/bin/python3
    if [ ! -z $PYTHON ]; then
        # Check if the total memory is less than 6GB.
        if [ `cat /proc/meminfo | head -1 | awk '{print $2}'` -lt 6291456 ]; then
            echo "Python binding generation is very memory intensive. At least 6GB of RAM is recommended."
            echo "Proceeding with binding generation using 1 core..."
            make -j 1 update_bindings
        else
            make update_bindings
        fi
    fi
    make
    ${SUDO} make install
}

for i in "$@"
do
case $i in
    -a|--app)
        APP=1
        PYTHON=1
        shift
        ;;
    -p|--python)
        PYTHON=1
        shift
        ;;
    *)
        # unknown option -> show help
        echo "Usage: `basename $0` [-p] [-a]"
        echo "  -p: enable Python bindings"
        echo "  -a: enable OMPL.app (implies '-p')"
        echo "  -g: install latest commit from main branch on GitHub"
    ;;
esac
done

install_common_dependencies
if [ ! -z $PYTHON ]; then
    install_python_binding_dependencies
fi
if [ ! -z $APP ]; then
    install_app_dependencies
fi
install_ompl
